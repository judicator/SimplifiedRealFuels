// Upper stage, including tanks for fuel and oxidizer (usually cryogenic balloons), high-pressurized small tanks for RCS thrusters, and control probe
// Also includes some structural frame, and probably batteries, communication antenna, payload decoupler and RCS thrusters
// As it's not just fuel tanks, total mass is 5% higher than dry mass of all included tanks (see %SRFUpperStageStructCoeff variable below)
// 5% was estimated according to dry masses of Delta-K, Centaur upper stage and DCSS:
// * https://en.wikipedia.org/wiki/Delta-K
// * https://en.wikipedia.org/wiki/Centaur_(rocket_stage))
// * https://en.wikipedia.org/wiki/Delta_Cryogenic_Second_Stage

@PART[*]:HAS[@RESOURCE[LiquidFuel],!RESOURCE[LqdHydrogen],@RESOURCE[Oxidizer],@RESOURCE[MonoPropellant],@MODULE[ModuleCommand],#CrewCapacity[0],~SRFUpperStage[],~SRFTankAlreadyConfigured[]]:AFTER[SimplifiedRealFuels]
{
	%SRFUpperStage = True

	%SRFUpperStageMainTankVolume = #$RESOURCE[LiquidFuel]/maxAmount$
	@SRFUpperStageMainTankVolume += #$RESOURCE[Oxidizer]/maxAmount$

	%SRFUpperStageRCSTankVolume = #$RESOURCE[MonoPropellant]/maxAmount$

	%LF = #$RESOURCE[LiquidFuel]/amount$
	@LF *= #$@RESOURCE_DEFINITION[LiquidFuel]/unitCost$
	%OX = #$RESOURCE[Oxidizer]/amount$
	@OX *= #$@RESOURCE_DEFINITION[Oxidizer]/unitCost$
	%MP = #$RESOURCE[MonoPropellant]/amount$
	@MP *= #$@RESOURCE_DEFINITION[MonoPropellant]/unitCost$
	%costOffset = #$LF$
	@costOffset += #$OX$
	@costOffset += #$MP$
	@costOffset *= -1

	%SRFMass = 0
	%SRFCost = 0

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
}

@PART[*]:HAS[@RESOURCE[LqdHydrogen],!RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],@RESOURCE[MonoPropellant],@MODULE[ModuleCommand],#CrewCapacity[0],~SRFUpperStage[],~SRFTankAlreadyConfigured[]]:AFTER[SimplifiedRealFuels]
{
	%SRFUpperStage = True

	%SRFUpperStageMainTankVolume = #$RESOURCE[LqdHydrogen]/maxAmount$
	@SRFUpperStageMainTankVolume += #$RESOURCE[Oxidizer]/maxAmount$
	@SRFUpperStageMainTankVolume /= 5.327

	%SRFUpperStageRCSTankVolume = #$RESOURCE[MonoPropellant]/maxAmount$

	%LF = #$RESOURCE[LqdHydrogen]/amount$
	@LF *= #$@RESOURCE_DEFINITION[LqdHydrogen]/unitCost$
	%OX = #$RESOURCE[Oxidizer]/amount$
	@OX *= #$@RESOURCE_DEFINITION[Oxidizer]/unitCost$
	%MP = #$RESOURCE[MonoPropellant]/amount$
	@MP *= #$@RESOURCE_DEFINITION[MonoPropellant]/unitCost$
	%costOffset = #$LF$
	@costOffset += #$OX$
	@costOffset += #$MP$
	@costOffset *= -1

	%SRFMass = 0
	%SRFCost = 0

	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
}

// Structural coefficient - how much extra mass should upper stage have
// Extra mass includes mass of structural frame, control probe, batteries, antenna, payload decoupler and RCS thrusters
// Default is 5% (coeff = 1.05) of it's tanks dry mass
@PART[*]:HAS[#SRFUpperStage[*rue],~SRFUpperStageStructCoeff[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFUpperStageStructCoeff = 1.05
}

// Default tanks type for fuel/oxidizer (for main engine or engines) is HydroLOX cryogenic balloon
@PART[*]:HAS[#SRFUpperStage[*rue],~SRFUpperStageMainTankType[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFUpperStageMainTankType = SRF_HydroLOXCryo
}

// Default tank type for RCS is Hydrazine (high-pressurized level IV tank)
@PART[*]:HAS[#SRFUpperStage[*rue],~SRFUpperStageRCSTankType[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFUpperStageRCSTankType = SRF_HydrazineIV-HP
}

@PART[*]:HAS[#SRFUpperStage[*rue],~SRFMass[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFMass = 0
}
@PART[*]:HAS[#SRFUpperStage[*rue],~SRFCost[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFCost = 0
}

//
// Fuel/oxidizer tanks variants for upper stage include:
//

//  - HydroLOX, generic tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_HydroLOXIV],#SRFMass[*],#SRFCost[*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_HydroLOXIV]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HydroLOXIV]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = LqdHydrogen
		amount = #$@B9_TANK_TYPE[SRF_HydroLOXIV]/RESOURCE[LqdHydrogen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydroLOXIV]/RESOURCE[LqdHydrogen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_HydroLOXIV]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydroLOXIV]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}

	!MODULE[ModuleCryoTank],* {}

	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdHydrogen
			// in % per hr
			BoiloffRate = 0.05
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

//  - HydroLOX, balloon tank
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_HydroLOXBalloon],#SRFMass[*],#SRFCost[*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_HydroLOXBalloon]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HydroLOXBalloon]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = LqdHydrogen
		amount = #$@B9_TANK_TYPE[SRF_HydroLOXBalloon]/RESOURCE[LqdHydrogen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydroLOXBalloon]/RESOURCE[LqdHydrogen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_HydroLOXBalloon]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydroLOXBalloon]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}

	!MODULE[ModuleCryoTank],* {}

	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdHydrogen
			// in % per hr
			BoiloffRate = 0.05
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

//  - HydroLOX, cryogenic balloon tank
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_HydroLOXCryo],#SRFMass[*],#SRFCost[*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_HydroLOXCryo]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HydroLOXCryo]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = LqdHydrogen
		amount = #$@B9_TANK_TYPE[SRF_HydroLOXCryo]/RESOURCE[LqdHydrogen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydroLOXCryo]/RESOURCE[LqdHydrogen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_HydroLOXCryo]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydroLOXCryo]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}

	!MODULE[ModuleCryoTank],* {}

	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.05
		CoolingEnabled = True
		BOILOFFCONFIG
		{
			FuelName = LqdHydrogen
			// in % per hr
			BoiloffRate = 0.01
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.001
		}
	}
}

//  - KeroLOX, generic tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_KeroLOXIV],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_KeroLOXIV]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_KeroLOXIV]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = Kerosene
		amount = #$@B9_TANK_TYPE[SRF_KeroLOXIV]/RESOURCE[Kerosene]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_KeroLOXIV]/RESOURCE[Kerosene]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_KeroLOXIV]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_KeroLOXIV]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}

	!MODULE[ModuleCryoTank],* {}

	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

//  - KeroLOX, balloon tank
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_KeroLOXBalloon],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_KeroLOXBalloon]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_KeroLOXBalloon]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = Kerosene
		amount = #$@B9_TANK_TYPE[SRF_KeroLOXBalloon]/RESOURCE[Kerosene]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_KeroLOXBalloon]/RESOURCE[Kerosene]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_KeroLOXBalloon]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_KeroLOXBalloon]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}

	!MODULE[ModuleCryoTank],* {}

	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

//  - MethaLOX, generic tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_MethaLOXIV],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_MethaLOXIV]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MethaLOXIV]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = LqdMethane
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXIV]/RESOURCE[LqdMethane]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXIV]/RESOURCE[LqdMethane]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_KeroLOXBalloon]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_KeroLOXBalloon]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}

	!MODULE[ModuleCryoTank],* {}

	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.005
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

//  - MethaLOX, balloon tank
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_MethaLOXBalloon],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_MethaLOXBalloon]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MethaLOXBalloon]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = LqdMethane
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXBalloon]/RESOURCE[LqdMethane]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXBalloon]/RESOURCE[LqdMethane]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXBalloon]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXBalloon]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}

	!MODULE[ModuleCryoTank],* {}

	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.005
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

//  - MethaLOX, cryogenic balloon tank
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_MethaLOXCryo],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_MethaLOXCryo]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MethaLOXCryo]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = LqdMethane
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXCryo]/RESOURCE[LqdMethane]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXCryo]/RESOURCE[LqdMethane]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXCryo]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXCryo]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}

	!MODULE[ModuleCryoTank],* {}

	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.05
		CoolingEnabled = True
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.001
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.001
		}
	}
}

//  - Aerozine50 + NTO, high-pressurized tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_Aerozine50NTOIV-HP],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_Aerozine50NTOIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_Aerozine50NTOIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = Aerozine50
		amount = #$@B9_TANK_TYPE[SRF_Aerozine50NTOIV-HP]/RESOURCE[Aerozine50]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_Aerozine50NTOIV-HP]/RESOURCE[Aerozine50]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_Aerozine50NTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_Aerozine50NTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_Aerozine50NTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_Aerozine50NTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
}

//  - UDMH + NTO, generic tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_UDMHNTOIV],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_UDMHNTOIV]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_UDMHNTOIV]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = Aerozine50
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV]/RESOURCE[UDMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV]/RESOURCE[UDMH]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
}

//  - UDMH + NTO, high-pressurized tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageMainTankType[SRF_UDMHNTOIV-HP],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageMainTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageMainTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = UDMH
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[UDMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[UDMH]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../SRFUpperStageMainTankVolume$
		@maxAmount *= #$../SRFUpperStageMainTankVolume$
	}
}

//
// RCS tanks variants for upper stage include:
//

//  - Helium, high-pressurized tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_HeliumIV-HP],!RESOURCE[_PressurizationGas],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageRCSTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageRCSTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = Helium
		amount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[Helium]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[Helium]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
}
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_HeliumIV-HP],@RESOURCE[_PressurizationGas],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageRCSTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageRCSTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = Helium
		amount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[Helium]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[Helium]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	@RESOURCE[_PressurizationGas]
	{
		%tmpAmount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@tmpAmount *= #$../SRFUpperStageRCSTankVolume$
		@amount += #$tmpAmount$
		@maxAmount += #$tmpAmount$
		!tmpAmount = DELETE
	}
}

//  - Hydrazine, high-pressurized tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_HydrazineIV-HP],!RESOURCE[_PressurizationGas],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageRCSTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageRCSTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = Hydrazine
		amount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
}
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_HydrazineIV-HP],@RESOURCE[_PressurizationGas],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageRCSTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageRCSTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = Hydrazine
		amount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	@RESOURCE[_PressurizationGas]
	{
		%tmpAmount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@tmpAmount *= #$../SRFUpperStageRCSTankVolume$
		@amount += #$tmpAmount$
		@maxAmount += #$tmpAmount$
		!tmpAmount = DELETE
	}
}

//  - MMH + NTO, high-pressurized tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_MMHNTOIV-HP],!RESOURCE[NTO],!RESOURCE[_PressurizationGas],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageRCSTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageRCSTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = MMH
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[MMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[MMH]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
}
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_MMHNTOIV-HP],@RESOURCE[NTO],@RESOURCE[_PressurizationGas],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageRCSTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageRCSTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = MMH
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[MMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[MMH]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	@RESOURCE[NTO]
	{
		%tmpAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		@tmpAmount *= #$../SRFUpperStageRCSTankVolume$
		@amount += #$tmpAmount$
		@maxAmount += #$tmpAmount$
		!tmpAmount = DELETE
	}
	@RESOURCE[_PressurizationGas]
	{
		%tmpAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@tmpAmount *= #$../SRFUpperStageRCSTankVolume$
		@amount += #$tmpAmount$
		@maxAmount += #$tmpAmount$
		!tmpAmount = DELETE
	}
}

//  - UDMH + NTO, high-pressurized tank, tech level IV
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_UDMHNTOIV-HP],!RESOURCE[UDMH],!RESOURCE[NTO],!RESOURCE[_PressurizationGas],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageRCSTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageRCSTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = UDMH
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[UDMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[UDMH]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
}
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_UDMHNTOIV-HP],@RESOURCE[UDMH],@RESOURCE[NTO],!RESOURCE[_PressurizationGas],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageRCSTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageRCSTankVolume$
	@SRFCost += #$dryCost$

	@RESOURCE[UDMH]
	{
		%tmpAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[UDMH]/unitsPerVolume$
		@tmpAmount *= #$../SRFUpperStageRCSTankVolume$
		@amount += #$tmpAmount$
		@maxAmount += #$tmpAmount$
		!tmpAmount = DELETE
	}
	@RESOURCE[NTO]
	{
		%tmpAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		@tmpAmount *= #$../SRFUpperStageRCSTankVolume$
		@amount += #$tmpAmount$
		@maxAmount += #$tmpAmount$
		!tmpAmount = DELETE
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
}
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_UDMHNTOIV-HP],!RESOURCE[UDMH],@RESOURCE[NTO],@RESOURCE[_PressurizationGas],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%dryMass = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankMass$
	@dryMass *= #$SRFUpperStageRCSTankVolume$
	@SRFMass += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankCost$
	@dryCost *= #$SRFUpperStageRCSTankVolume$
	@SRFCost += #$dryCost$

	RESOURCE
	{
		name = UDMH
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[UDMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[UDMH]/unitsPerVolume$
		@amount *= #$../SRFUpperStageRCSTankVolume$
		@maxAmount *= #$../SRFUpperStageRCSTankVolume$
	}
	@RESOURCE[NTO]
	{
		%tmpAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		@tmpAmount *= #$../SRFUpperStageRCSTankVolume$
		@amount += #$tmpAmount$
		@maxAmount += #$tmpAmount$
		!tmpAmount = DELETE
	}
	@RESOURCE[_PressurizationGas]
	{
		%tmpAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@tmpAmount *= #$../SRFUpperStageRCSTankVolume$
		@amount += #$tmpAmount$
		@maxAmount += #$tmpAmount$
		!tmpAmount = DELETE
	}
}

// RCS thrusters (if part has any) should use propellants from RCS tanks
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_HeliumIV-HP],@MODULE[ModuleRCS*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	@MODULE[ModuleRCS*],*
	{
		!resourceName = DELETE
		!PROPELLANT[],* {}
		PROPELLANT
		{
			name = Helium
			ratio = 500
		}
		PROPELLANT
		{
			name = _PressurizationGas
			ratio = 1
		}
		!atmosphereCurve{}
		atmosphereCurve
		{
			key = 0 85
			key = 1 10
			key = 5 0.001
		}
	}
}
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_HydrazineIV-HP],@MODULE[ModuleRCS*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	@MODULE[ModuleRCS*],*
	{
		!resourceName = DELETE
		!PROPELLANT[],* {}
		PROPELLANT
		{
			name = Hydrazine
			ratio = 1
		}
		PROPELLANT
		{
			name = _PressurizationGas
			ratio = 1
		}
		!atmosphereCurve{}
		atmosphereCurve
		{
			key = 0 240
			key = 1 60
			key = 5 0.001
		}
	}
}
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_MMHNTOIV-HP],@MODULE[ModuleRCS*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	@MODULE[ModuleRCS*],*
	{
		!resourceName = DELETE
		!PROPELLANT[],* {}
		PROPELLANT
		{
			name = MMH
			ratio = 0.5
		}
		PROPELLANT
		{
			name = NTO
			ratio = 0.5
		}
		PROPELLANT
		{
			name = _PressurizationGas
			ratio = 1
		}
		!atmosphereCurve{}
		atmosphereCurve
		{
			key = 0 315
			key = 1 80
			key = 5 0.001
		}
	}
}
@PART[*]:HAS[#SRFUpperStage[*rue],#SRFUpperStageRCSTankType[SRF_UDMHNTOIV-HP],@MODULE[ModuleRCS*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	@MODULE[ModuleRCS*],*
	{
		!resourceName = DELETE
		!PROPELLANT[],* {}
		PROPELLANT
		{
			name = UDMH
			ratio = 0.42
		}
		PROPELLANT
		{
			name = NTO
			ratio = 0.58
		}
		PROPELLANT
		{
			name = _PressurizationGas
			ratio = 1
		}
		!atmosphereCurve{}
		atmosphereCurve
		{
			key = 0 315
			key = 1 80
			key = 5 0.001
		}
	}
}

// Add resources cost
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[LqdHydrogen],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[LqdHydrogen]/amount$
	@LF *= #$@RESOURCE_DEFINITION[LqdHydrogen]/unitCost$
	@SRFCost += #$LF$
}
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[LqdOxygen],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[LqdOxygen]/amount$
	@LF *= #$@RESOURCE_DEFINITION[LqdOxygen]/unitCost$
	@SRFCost += #$LF$
}
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[Kerosene],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[Kerosene]/amount$
	@LF *= #$@RESOURCE_DEFINITION[Kerosene]/unitCost$
	@SRFCost += #$LF$
}
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[LqdMethane],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[LqdMethane]/amount$
	@LF *= #$@RESOURCE_DEFINITION[LqdMethane]/unitCost$
	@SRFCost += #$LF$
}
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[Aerozine50],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[Aerozine50]/amount$
	@LF *= #$@RESOURCE_DEFINITION[Aerozine50]/unitCost$
	@SRFCost += #$LF$
}
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[UDMH],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[UDMH]/amount$
	@LF *= #$@RESOURCE_DEFINITION[UDMH]/unitCost$
	@SRFCost += #$LF$
}
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[NTO],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[NTO]/amount$
	@LF *= #$@RESOURCE_DEFINITION[NTO]/unitCost$
	@SRFCost += #$LF$
}
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[Helium],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[Helium]/amount$
	@LF *= #$@RESOURCE_DEFINITION[Helium]/unitCost$
	@SRFCost += #$LF$
}
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[Hydrazine],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[Hydrazine]/amount$
	@LF *= #$@RESOURCE_DEFINITION[Hydrazine]/unitCost$
	@SRFCost += #$LF$
}
@PART[*]:HAS[#SRFUpperStage[*rue],@RESOURCE[MMH],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[MMH]/amount$
	@LF *= #$@RESOURCE_DEFINITION[MMH]/unitCost$
	@SRFCost += #$LF$
}

// Final adjustments
@PART[*]:HAS[#SRFUpperStage[*rue],~costOffset[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%costOffset = 0
}
@PART[*]:HAS[#SRFUpperStage[*rue],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	@cost += #$costOffset$
	@cost ^= :^-.*$:0: // If negative, set to zero
	@cost += #$SRFCost$ // adding cost of fuel tanks and resources

	@mass = #$SRFMass$  // dry mass of fuel tanks
	@mass *= #$SRFUpperStageStructCoeff$  // structural coefficient - default is +5% of dry mass
}

// Same as avionics - no science experiments and data storage (both have no sense on upper stages)
@PART[*]:HAS[#SRFUpperStage[*rue]]:FINAL
{
	// Stock
	!MODULE[ModuleScienceExperiment],* {}
	!MODULE[ModuleScienceContainer] {}
	!MODULE[ModuleProbeControlPoint] {}
	!MODULE[ModuleKerbNetAccess] {}

	// DMagic
	!MODULE[DM*],* {}
}

// Kerbalism
@PART[*]:HAS[#SRFUpperStage[*rue]]:NEEDS[FeatureScience]:FINAL
{
	!MODULE[HardDrive] {}
	!MODULE[Configure] {}
	!MODULE[Experiment],* {}
}
