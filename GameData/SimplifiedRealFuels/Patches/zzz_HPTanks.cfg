// High-presurized tanks for pressure-fed engines
// These tanks have 4 tech levels

@PART[*]:HAS[@RESOURCE[MonoPropellant],!RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleEngines],!MODULE[ModuleEnginesFX],!MODULE[KerbalEVA],~SRFTankType[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankType = HighPressurized

	%totalCap = #$RESOURCE[MonoPropellant]/maxAmount$

	%massOffset = #$mass$
	@massOffset *= -1

	%costOffset = #$cost$
	@costOffset *= -1

	!RESOURCE[MonoPropellant] {}
}

// Default mass offset = -mass
@PART[*]:HAS[#SRFTankType[HighPressurized],#totalCap[>0],~massOffset[],#mass[*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%massOffset = #$mass$
	@massOffset *= -1
}
// Default cost offset = -cost
@PART[*]:HAS[#SRFTankType[HighPressurized],#totalCap[>0],~costOffset[],#cost[*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%costOffset = #$cost$
	@costOffset *= -1
}

// If part has some modules - correct tank mass and cost
@PART[*]:HAS[#SRFTankType[HighPressurized],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleCargoBay]]:FOR[zzzzSimplifiedRealFuels]
{
	// Cargo bays, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.00055 // generic dry mass per unit of MP
	@massOffset *= -1
	// Cost exluding MP cost
	%costOffset = #$totalCap$
	@costOffset *= 1.2 // cost per one unit of MP
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[HighPressurized],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleCommand]]:FOR[zzzzSimplifiedRealFuels]
{
	// Command modules, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.00055 // generic dry mass per unit of MP
	@massOffset *= -1
	// Cost exluding MP cost
	%costOffset = #$totalCap$
	@costOffset *= 1.2 // cost per one unit of MP
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[HighPressurized],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleDockingNode]]:FOR[zzzzSimplifiedRealFuels]
{
	// Docking ports, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.00055 // generic dry mass per unit of MP
	@massOffset *= -1
	// Cost exluding MP cost
	%costOffset = #$totalCap$
	@costOffset *= 1.2 // cost per one unit of MP
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[HighPressurized],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleParachute]]:FOR[zzzzSimplifiedRealFuels]
{
	// Parachutes, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.00055 // generic dry mass per unit of MP
	@massOffset *= -1
	// Cost exluding MP cost
	%costOffset = #$totalCap$
	@costOffset *= 1.2 // cost per one unit of MP
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[HighPressurized],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleActiveRadiator]]:FOR[zzzzSimplifiedRealFuels]
{
	// Radiators, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.00055 // generic dry mass per unit of MP
	@massOffset *= -1
	// Cost exluding MP cost
	%costOffset = #$totalCap$
	@costOffset *= 1.2 // cost per one unit of MP
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[HighPressurized],~SRFTankAlreadyConfigured[],#totalCap[>0],#CrewCapacity[>0]]:FOR[zzzzSimplifiedRealFuels]
{
	// Crewed modules, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.00055 // generic dry mass per unit of MP
	@massOffset *= -1
	// Cost exluding MP cost
	%costOffset = #$totalCap$
	@costOffset *= 1.2 // cost per one unit of MP
	@costOffset *= -1
}

// If tank tech was not defined, let's set it according to tank volume: larger volume means higher tech level
@PART[*]:HAS[#SRFTankType[HighPressurized],#totalCap[>400],~SRFTankAlreadyConfigured[],~SRFTankTech[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Volume > 400
	%SRFTankTech = LevelIV
}
@PART[*]:HAS[#SRFTankType[HighPressurized],#totalCap[>120],~SRFTankAlreadyConfigured[],~SRFTankTech[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Volume > 120
	%SRFTankTech = LevelIII
}
@PART[*]:HAS[#SRFTankType[HighPressurized],#totalCap[>20],~SRFTankAlreadyConfigured[],~SRFTankTech[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Volume > 20
	%SRFTankTech = LevelII
}
@PART[*]:HAS[#SRFTankType[HighPressurized],~SRFTankAlreadyConfigured[],~SRFTankTech[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Everythig else - low tech tank
	%SRFTankTech = LevelI
}

// Parts with built-in RCS thrusters should only have appropriate fuel tanks - no fuel switching for them

// Level IV Helium HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIV],@MODULE[ModuleRCS*],#SRFRCSType[Helium],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = Helium
		amount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[Helium]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[Helium]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HeliumIV-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level III Helium HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],@MODULE[ModuleRCS*],#SRFRCSType[Helium],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = Helium
		amount = #$@B9_TANK_TYPE[SRF_HeliumIII-HP]/RESOURCE[Helium]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HeliumIII-HP]/RESOURCE[Helium]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_HeliumIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HeliumIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_HeliumIII-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HeliumIII-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level IV Hydrazine HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIV],@MODULE[ModuleRCS*],#SRFRCSType[Hydrazine],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = Hydrazine
		amount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HydrazineIV-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level III Hydrazine HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIII],@MODULE[ModuleRCS*],#SRFRCSType[Hydrazine],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = Hydrazine
		amount = #$@B9_TANK_TYPE[SRF_HydrazineIII-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineIII-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_HydrazineIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_HydrazineIII-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HydrazineIII-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level II Hydrazine HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelII],@MODULE[ModuleRCS*],#SRFRCSType[Hydrazine],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = Hydrazine
		amount = #$@B9_TANK_TYPE[SRF_HydrazineII-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineII-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_HydrazineII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_HydrazineII-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HydrazineII-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level I Hydrazine HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelI],@MODULE[ModuleRCS*],#SRFRCSType[Hydrazine],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = Hydrazine
		amount = #$@B9_TANK_TYPE[SRF_HydrazineI-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineI-HP]/RESOURCE[Hydrazine]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_HydrazineI-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_HydrazineI-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_HydrazineI-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_HydrazineI-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level IV MMH/NTO HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIV],@MODULE[ModuleRCS*],#SRFRCSType[MMHNTO],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = MMH
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[MMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[MMH]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MMHNTOIV-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level III MMH/NTO HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIII],@MODULE[ModuleRCS*],#SRFRCSType[MMHNTO],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = MMH
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIII-HP]/RESOURCE[MMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIII-HP]/RESOURCE[MMH]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIII-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIII-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_MMHNTOIII-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MMHNTOIII-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level II MMH/NTO HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelII],@MODULE[ModuleRCS*],#SRFRCSType[MMHNTO],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = MMH
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOII-HP]/RESOURCE[MMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOII-HP]/RESOURCE[MMH]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOII-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOII-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_MMHNTOII-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MMHNTOII-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level I MMH/NTO HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelI],@MODULE[ModuleRCS*],#SRFRCSType[MMHNTO],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = MMH
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOI-HP]/RESOURCE[MMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOI-HP]/RESOURCE[MMH]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOI-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOI-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_MMHNTOI-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MMHNTOI-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_MMHNTOI-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MMHNTOI-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level IV UDMH/NTO HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIV],@MODULE[ModuleRCS*],#SRFRCSType[UDMHNTO],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = UDMH
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[UDMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[UDMH]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_UDMHNTOIV-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level III UDMH/NTO HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIII],@MODULE[ModuleRCS*],#SRFRCSType[UDMHNTO],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = UDMH
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIII-HP]/RESOURCE[UDMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIII-HP]/RESOURCE[UDMH]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIII-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIII-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_UDMHNTOIII-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_UDMHNTOIII-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level II UDMH/NTO HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelII],@MODULE[ModuleRCS*],#SRFRCSType[UDMHNTO],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = UDMH
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOII-HP]/RESOURCE[UDMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOII-HP]/RESOURCE[UDMH]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOII-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOII-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_UDMHNTOII-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_UDMHNTOII-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level I UDMH/NTO HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelI],@MODULE[ModuleRCS*],#SRFRCSType[UDMHNTO],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = UDMH
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOI-HP]/RESOURCE[UDMH]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOI-HP]/RESOURCE[UDMH]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = NTO
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOI-HP]/RESOURCE[NTO]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOI-HP]/RESOURCE[NTO]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_UDMHNTOI-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_UDMHNTOI-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_UDMHNTOI-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_UDMHNTOI-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level IV MethaLOX HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIV],@MODULE[ModuleRCS*],#SRFRCSType[MethaLOX],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = LqdMethane
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXIV-HP]/RESOURCE[LqdMethane]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXIV-HP]/RESOURCE[LqdMethane]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXIV-HP]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXIV-HP]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXIV-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_MethaLOXIV-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MethaLOXIV-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}

// Level III MethaLOX HP tank
@PART[*]:HAS[#SRFTankType[HighPressurized],@MODULE[ModuleRCS*],#SRFRCSType[MethaLOX],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	RESOURCE
	{
		name = LqdMethane
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXIII-HP]/RESOURCE[LqdMethane]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXIII-HP]/RESOURCE[LqdMethane]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXIII-HP]/RESOURCE[LqdOxygen]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXIII-HP]/RESOURCE[LqdOxygen]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}
	RESOURCE
	{
		name = _PressurizationGas
		amount = #$@B9_TANK_TYPE[SRF_MethaLOXIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		maxAmount = #$@B9_TANK_TYPE[SRF_MethaLOXIII-HP]/RESOURCE[_PressurizationGas]/unitsPerVolume$
		@amount *= #$../totalCap$
		@maxAmount *= #$../totalCap$
	}

	%dryMass = #$@B9_TANK_TYPE[SRF_MethaLOXIII-HP]/tankMass$
	@dryMass *= #$totalCap$
	@massOffset += #$dryMass$

	%dryCost = #$@B9_TANK_TYPE[SRF_MethaLOXIII-HP]/tankCost$
	@dryCost *= #$totalCap$
	@costOffset += #$dryCost$

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero
}


// Fuel tank types switcher

// High-tech tanks (tech level IV)
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIV],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack,B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		SUBTYPE
		{
			name = Aerozine50NTOIV-HP
			title = #LOC_SRF_Aerozine50NTO_IV-HP_DisplayName
			tankType = SRF_Aerozine50NTOIV-HP
		}
		SUBTYPE
		{
			name = MMHNTOIV-HP
			title = #LOC_SRF_MMHNTO_IV-HP_DisplayName
			tankType = SRF_MMHNTOIV-HP
		}
		SUBTYPE
		{
			name = UDMHNTOIV-HP
			title = #LOC_SRF_UDMHNTO_IV-HP_DisplayName
			tankType = SRF_UDMHNTOIV-HP
		}
		SUBTYPE
		{
			name = HydrazineNTOIV-HP
			title = #LOC_SRF_HydrazineNTO_IV-HP_DisplayName
			tankType = SRF_HydrazineNTOIV-HP
		}
		SUBTYPE
		{
			name = HydrazineIV-HP
			title = #LOC_SRF_Hydrazine_IV-HP_DisplayName
			tankType = SRF_HydrazineIV-HP
		}
		SUBTYPE
		{
			name = HeliumIV-HP
			title = #LOC_SRF_Helium_IV-HP_DisplayName
			tankType = SRF_HeliumIV-HP
		}
		SUBTYPE
		{
			name = MethaLOXIV-HP
			title = #LOC_SRF_MethaLOX_IV-HP_DisplayName
			tankType = SRF_MethaLOXIV-HP
		}
		SUBTYPE
		{
			name = LOXIV-HP
			title = #LOC_SRF_LOX_IV-HP_DisplayName
			tankType = SRF_LOXIV-HP
		}
		SUBTYPE
		{
			name = XenonIV-HP
			title = #LOC_SRF_Xenon_IV-HP_DisplayName
			tankType = SRF_XenonIV-HP
		}
		SUBTYPE
		{
			name = ArgonIV-HP
			title = #LOC_SRF_Argon_IV-HP_DisplayName
			tankType = SRF_ArgonIV-HP
		}
		SUBTYPE
		{
			name = UDMHNTOIV
			title = #LOC_SRF_UDMHNTO_IV_DisplayName
			tankType = SRF_UDMHNTOIV
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

// Mid-to-high-tech tanks (tech level III)
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelIII],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack,B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// Level III
		SUBTYPE
		{
			name = Aerozine50NTOIII-HP
			title = #LOC_SRF_Aerozine50NTO_III-HP_DisplayName
			tankType = SRF_Aerozine50NTOIII-HP
		}
		SUBTYPE
		{
			name = MMHNTOIII-HP
			title = #LOC_SRF_MMHNTO_III-HP_DisplayName
			tankType = SRF_MMHNTOIII-HP
		}
		SUBTYPE
		{
			name = UDMHNTOIII-HP
			title = #LOC_SRF_UDMHNTO_III-HP_DisplayName
			tankType = SRF_UDMHNTOIII-HP
		}
		SUBTYPE
		{
			name = HydrazineNTOIII-HP
			title = #LOC_SRF_HydrazineNTO_III-HP_DisplayName
			tankType = SRF_HydrazineNTOIII-HP
		}
		SUBTYPE
		{
			name = HydrazineIII-HP
			title = #LOC_SRF_Hydrazine_III-HP_DisplayName
			tankType = SRF_HydrazineIII-HP
		}
		SUBTYPE
		{
			name = HeliumIII-HP
			title = #LOC_SRF_Helium_III-HP_DisplayName
			tankType = SRF_HeliumIII-HP
		}
		SUBTYPE
		{
			name = MethaLOXIII-HP
			title = #LOC_SRF_MethaLOX_III-HP_DisplayName
			tankType = SRF_MethaLOXIII-HP
		}
		SUBTYPE
		{
			name = LOXIII-HP
			title = #LOC_SRF_LOX_III-HP_DisplayName
			tankType = SRF_LOXIII-HP
		}
		SUBTYPE
		{
			name = XenonIII-HP
			title = #LOC_SRF_Xenon_III-HP_DisplayName
			tankType = SRF_XenonIII-HP
		}
		SUBTYPE
		{
			name = ArgonIII-HP
			title = #LOC_SRF_Argon_III-HP_DisplayName
			tankType = SRF_ArgonIII-HP
		}
		SUBTYPE
		{
			name = UDMHNTOIII
			title = #LOC_SRF_UDMHNTO_III_DisplayName
			tankType = SRF_UDMHNTOIII
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

// Low-to-mid-tech tanks (tech level II)
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelII],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack,B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// Level II
		SUBTYPE
		{
			name = Aerozine50NTOII-HP
			title = #LOC_SRF_Aerozine50NTO_II-HP_DisplayName
			tankType = SRF_Aerozine50NTOII-HP
		}
		SUBTYPE
		{
			name = MMHNTOII-HP
			title = #LOC_SRF_MMHNTO_II-HP_DisplayName
			tankType = SRF_MMHNTOII-HP
		}
		SUBTYPE
		{
			name = UDMHNTOII-HP
			title = #LOC_SRF_UDMHNTO_II-HP_DisplayName
			tankType = SRF_UDMHNTOII-HP
		}
		SUBTYPE
		{
			name = HydrazineNTOII-HP
			title = #LOC_SRF_HydrazineNTO_II-HP_DisplayName
			tankType = SRF_HydrazineNTOII-HP
		}
		SUBTYPE
		{
			name = HydrazineII-HP
			title = #LOC_SRF_Hydrazine_II-HP_DisplayName
			tankType = SRF_HydrazineII-HP
		}
		SUBTYPE
		{
			name = HeliumIII-HP
			title = #LOC_SRF_Helium_III-HP_DisplayName
			tankType = SRF_HeliumIII-HP
		}
		SUBTYPE
		{
			name = UDMHNTOII
			title = #LOC_SRF_UDMHNTO_II_DisplayName
			tankType = SRF_UDMHNTOII
		}
	}
}

// Low-tech tanks (tech level I)
@PART[*]:HAS[#SRFTankType[HighPressurized],#SRFTankTech[LevelI],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack,B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF High-Pressurized *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// Level I
		SUBTYPE
		{
			name = Aerozine50NTOI-HP
			title = #LOC_SRF_Aerozine50NTO_I-HP_DisplayName
			tankType = SRF_Aerozine50NTOI-HP
		}
		SUBTYPE
		{
			name = MMHNTOI-HP
			title = #LOC_SRF_MMHNTO_I-HP_DisplayName
			tankType = SRF_MMHNTOI-HP
		}
		SUBTYPE
		{
			name = UDMHNTOI-HP
			title = #LOC_SRF_UDMHNTO_I-HP_DisplayName
			tankType = SRF_UDMHNTOI-HP
		}
		SUBTYPE
		{
			name = HydrazineNTOI-HP
			title = #LOC_SRF_HydrazineNTO_I-HP_DisplayName
			tankType = SRF_HydrazineNTOI-HP
		}
		SUBTYPE
		{
			name = HydrazineI-HP
			title = #LOC_SRF_Hydrazine_I-HP_DisplayName
			tankType = SRF_HydrazineI-HP
		}
		SUBTYPE
		{
			name = HeliumIII-HP
			title = #LOC_SRF_Helium_III-HP_DisplayName
			tankType = SRF_HeliumIII-HP
		}
		SUBTYPE
		{
			name = UDMHNTOI
			title = #LOC_SRF_UDMHNTO_I_DisplayName
			tankType = SRF_UDMHNTOI
		}
	}
}

// Add resources cost
@PART[*]:HAS[#SRFTankType[HighPressurized],@RESOURCE[LqdOxygen]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[LqdOxygen]/amount$
	@LF *= #$@RESOURCE_DEFINITION[LqdOxygen]/unitCost$
	@cost += #$LF$
}
@PART[*]:HAS[#SRFTankType[HighPressurized],@RESOURCE[LqdMethane]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[LqdMethane]/amount$
	@LF *= #$@RESOURCE_DEFINITION[LqdMethane]/unitCost$
	@cost += #$LF$
}
@PART[*]:HAS[#SRFTankType[HighPressurized],@RESOURCE[UDMH]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[UDMH]/amount$
	@LF *= #$@RESOURCE_DEFINITION[UDMH]/unitCost$
	@cost += #$LF$
}
@PART[*]:HAS[#SRFTankType[HighPressurized],@RESOURCE[NTO]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[NTO]/amount$
	@LF *= #$@RESOURCE_DEFINITION[NTO]/unitCost$
	@cost += #$LF$
}
@PART[*]:HAS[#SRFTankType[HighPressurized],@RESOURCE[Helium]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[Helium]/amount$
	@LF *= #$@RESOURCE_DEFINITION[Helium]/unitCost$
	@cost += #$LF$
}
@PART[*]:HAS[#SRFTankType[HighPressurized],@RESOURCE[Hydrazine]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[Hydrazine]/amount$
	@LF *= #$@RESOURCE_DEFINITION[Hydrazine]/unitCost$
	@cost += #$LF$
}
@PART[*]:HAS[#SRFTankType[HighPressurized],@RESOURCE[MMH]]:NEEDS[CommunityResourcePack]:FOR[zzzzSimplifiedRealFuels]
{
	%LF = #$RESOURCE[MMH]/amount$
	@LF *= #$@RESOURCE_DEFINITION[MMH]/unitCost$
	@cost += #$LF$
}

// Enable fuel jettison
@PART[*]:HAS[#SRFTankType[HighPressurized],!MODULE[ModuleFuelJettison]]:FOR[zzzzSimplifiedRealFuels]
{
	MODULE
	{
		name = ModuleFuelJettison
	}
}
