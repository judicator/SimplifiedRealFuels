// Service modules are special fuel tanks type, which are not used in launch vehicles (only in spacecrafts themselves)
// Most variants are high-pressurized tanks, but also include HydroLOX and MethaLOX cryogenic balloons and generic KeroLOX tanks

@PART[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],@RESOURCE[MonoPropellant],!MODULE[ModuleCommand],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleEngines],!MODULE[ModuleEnginesFX],~SRFTankType[],~SRFUpperStage[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankType = ServiceModule

	%totalCap = #$RESOURCE[LiquidFuel]/maxAmount$
	@totalCap += #$RESOURCE[Oxidizer]/maxAmount$
	@totalCap += #$RESOURCE[MonoPropellant]/maxAmount$

	%massOffset = #$mass$
	@massOffset *= -1

	%costOffset = #$cost$
	@costOffset *= -1

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
}

// Default mass offset = -mass
@PART[*]:HAS[#SRFTankType[ServiceModule],#totalCap[>0],~massOffset[],#mass[*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%massOffset = #$mass$
	@massOffset *= -1
}
// Default cost offset = -cost
@PART[*]:HAS[#SRFTankType[ServiceModule],#totalCap[>0],~costOffset[],#cost[*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%costOffset = #$cost$
	@costOffset *= -1
}

// If tank tech was not defined, let's set it according to tank volume: larger volume means higher tech level
@PART[*]:HAS[#SRFTankType[ServiceModule],#totalCap[>120],~SRFTankTech[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Volume > 120
	%SRFTankTech = LevelIV
}
@PART[*]:HAS[#SRFTankType[ServiceModule],~SRFTankTech[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Everythig else - low to mid tech tank
	%SRFTankTech = LevelIII
}

// If part has some modules - correct tank mass and cost
@PART[*]:HAS[#SRFTankType[ServiceModule],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleCargoBay]]:FOR[zzzzSimplifiedRealFuels]
{
	// Cargo bays, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[ServiceModule],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleCommand]]:FOR[zzzzSimplifiedRealFuels]
{
	// Command modules, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[ServiceModule],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleDockingNode]]:FOR[zzzzSimplifiedRealFuels]
{
	// Docking ports, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[ServiceModule],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleParachute]]:FOR[zzzzSimplifiedRealFuels]
{
	// Parachutes, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[ServiceModule],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleActiveRadiator]]:FOR[zzzzSimplifiedRealFuels]
{
	// Radiators, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[ServiceModule],~SRFTankAlreadyConfigured[],#totalCap[>0],#CrewCapacity[>0]]:FOR[zzzzSimplifiedRealFuels]
{
	// Crewed modules, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}

// Fuel tank types switcher

// High-tech service modules (tech level IV)
@PART[*]:HAS[#SRFTankType[ServiceModule],#SRFTankTech[LevelIV],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack,B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF Service Module *:

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// HP tanks
		SUBTYPE
		{
			name = Aerozine50NTOIV-HP
			title = #LOC_SRF_Aerozine50NTO_IV-HP_DisplayName
			tankType = SRF_Aerozine50NTOIV-HP
		}
		SUBTYPE
		{
			name = MMHNTOIV-HP
			title = #LOC_SRF_MMHNTO_IV-HP_DisplayName
			tankType = SRF_MMHNTOIV-HP
		}
		SUBTYPE
		{
			name = UDMHNTOIV-HP
			title = #LOC_SRF_UDMHNTO_IV-HP_DisplayName
			tankType = SRF_UDMHNTOIV-HP
		}
		SUBTYPE
		{
			name = HydrazineNTOIV-HP
			title = #LOC_SRF_HydrazineNTO_IV-HP_DisplayName
			tankType = SRF_HydrazineNTOIV-HP
		}
		SUBTYPE
		{
			name = HydrazineIV-HP
			title = #LOC_SRF_Hydrazine_IV-HP_DisplayName
			tankType = SRF_HydrazineIV-HP
		}
		SUBTYPE
		{
			name = HeliumIV-HP
			title = #LOC_SRF_Helium_IV-HP_DisplayName
			tankType = SRF_HeliumIV-HP
		}
		SUBTYPE
		{
			name = MethaLOXIV-HP
			title = #LOC_SRF_MethaLOX_IV-HP_DisplayName
			tankType = SRF_MethaLOXIV-HP
		}
		SUBTYPE
		{
			name = LOXIV-HP
			title = #LOC_SRF_LOX_IV-HP_DisplayName
			tankType = SRF_LOXIV-HP
		}
		SUBTYPE
		{
			name = XenonIV-HP
			title = #LOC_SRF_Xenon_IV-HP_DisplayName
			tankType = SRF_XenonIV-HP
		}
		SUBTYPE
		{
			name = ArgonIV-HP
			title = #LOC_SRF_Argon_IV-HP_DisplayName
			tankType = SRF_ArgonIV-HP
		}

		// Cryogenic balloon tanks
		SUBTYPE
		{
			name = HydroLOXCryo
			title = #LOC_SRF_HydroLOX_Cryo_DisplayName
			tankType = SRF_HydroLOXCryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = MethaLOXCryo
			title = #LOC_SRF_MethaLOX_Cryo_DisplayName
			tankType = SRF_MethaLOXCryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LH2Cryo
			title = #LOC_SRF_LH2_Cryo_DisplayName
			tankType = SRF_LH2Cryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LqdMethaneCryo
			title = #LOC_SRF_LqdMethane_Cryo_DisplayName
			tankType = SRF_LqdMethaneCryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LqdAmmoniaCryo
			title = #LOC_SRF_LqdAmmonia_Cryo_DisplayName
			tankType = SRF_LqdAmmoniaCryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}

		// Generic tanks
		SUBTYPE
		{
			name = UDMHNTOIV
			title = #LOC_SRF_UDMHNTO_IV_DisplayName
			tankType = SRF_UDMHNTOIV
		}
		SUBTYPE
		{
			name = Lithium
			title = #LOC_SRF_Lithium_DisplayName
			tankType = SRF_Lithium
		}
		SUBTYPE
		{
			name = KeroLOXIV
			title = #LOC_SRF_KeroLOX_IV_DisplayName
			tankType = SRF_KeroLOXIV
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.05
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdHydrogen
			// in % per hr
			BoiloffRate = 0.01
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.001
		}
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.001
		}
	}
}

// Mid-to-high-tech service modules (tech level III)
@PART[*]:HAS[#SRFTankType[ServiceModule],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[CommunityResourcePack,B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF Service Module *:

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// HP tanks
		SUBTYPE
		{
			name = Aerozine50NTOIII-HP
			title = #LOC_SRF_Aerozine50NTO_III-HP_DisplayName
			tankType = SRF_Aerozine50NTOIII-HP
		}
		SUBTYPE
		{
			name = MMHNTOIII-HP
			title = #LOC_SRF_MMHNTO_III-HP_DisplayName
			tankType = SRF_MMHNTOIII-HP
		}
		SUBTYPE
		{
			name = UDMHNTOIII-HP
			title = #LOC_SRF_UDMHNTO_III-HP_DisplayName
			tankType = SRF_UDMHNTOIII-HP
		}
		SUBTYPE
		{
			name = HydrazineNTOIII-HP
			title = #LOC_SRF_HydrazineNTO_III-HP_DisplayName
			tankType = SRF_HydrazineNTOIII-HP
		}
		SUBTYPE
		{
			name = HydrazineIII-HP
			title = #LOC_SRF_Hydrazine_III-HP_DisplayName
			tankType = SRF_HydrazineIII-HP
		}
		SUBTYPE
		{
			name = HeliumIII-HP
			title = #LOC_SRF_Helium_III-HP_DisplayName
			tankType = SRF_HeliumIII-HP
		}
		SUBTYPE
		{
			name = MethaLOXIII-HP
			title = #LOC_SRF_MethaLOX_III-HP_DisplayName
			tankType = SRF_MethaLOXIII-HP
		}
		SUBTYPE
		{
			name = LOXIII-HP
			title = #LOC_SRF_LOX_III-HP_DisplayName
			tankType = SRF_LOXIII-HP
		}
		SUBTYPE
		{
			name = XenonIII-HP
			title = #LOC_SRF_Xenon_III-HP_DisplayName
			tankType = SRF_XenonIII-HP
		}
		SUBTYPE
		{
			name = ArgonIII-HP
			title = #LOC_SRF_Argon_III-HP_DisplayName
			tankType = SRF_ArgonIII-HP
		}

		// Cryogenic balloon tanks
		SUBTYPE
		{
			name = HydroLOXCryo
			title = #LOC_SRF_HydroLOX_Cryo_DisplayName
			tankType = SRF_HydroLOXCryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = MethaLOXCryo
			title = #LOC_SRF_MethaLOX_Cryo_DisplayName
			tankType = SRF_MethaLOXCryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LH2Cryo
			title = #LOC_SRF_LH2_Cryo_DisplayName
			tankType = SRF_LH2Cryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LqdMethaneCryo
			title = #LOC_SRF_LqdMethane_Cryo_DisplayName
			tankType = SRF_LqdMethaneCryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LqdAmmoniaCryo
			title = #LOC_SRF_LqdAmmonia_Cryo_DisplayName
			tankType = SRF_LqdAmmoniaCryo
			upgradeRequired = SRF_CryoTanks_Upgrade
		}

		// Generic tanks
		SUBTYPE
		{
			name = UDMHNTOIII
			title = #LOC_SRF_UDMHNTO_III_DisplayName
			tankType = SRF_UDMHNTOIII
		}
		SUBTYPE
		{
			name = Lithium
			title = #LOC_SRF_Lithium_DisplayName
			tankType = SRF_Lithium
		}
		SUBTYPE
		{
			name = KeroLOXIII
			title = #LOC_SRF_KeroLOX_III_DisplayName
			tankType = SRF_KeroLOXIII
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.05
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdHydrogen
			// in % per hr
			BoiloffRate = 0.01
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.001
		}
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.001
		}
	}
}
