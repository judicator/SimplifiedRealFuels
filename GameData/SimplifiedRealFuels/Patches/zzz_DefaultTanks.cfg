// Default fuel tanks - these include mostly tanks for non-pressure-fed engines (think about lower rocket stages)
// Includes generic tanks, balloons, cryogenic balloons and spaceplane fuselages. Fuselages and balloons are mutually exclusive 
// Default tanks have 4 tech levels

@PART[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[MonoPropellant],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleEngines],!MODULE[ModuleEnginesFX],~SRFTankType[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankType = Default

	%totalCap = #$RESOURCE[LiquidFuel]/maxAmount$
	@totalCap += #$RESOURCE[Oxidizer]/maxAmount$

	%massOffset = #$mass$
	@massOffset *= -1

	%costOffset = #$cost$
	@costOffset *= -1

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
}
@PART[*]:HAS[@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[MonoPropellant],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleEngines],!MODULE[ModuleEnginesFX],~SRFTankType[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankType = Default

	%totalCap = #$RESOURCE[LiquidFuel]/maxAmount$

	%massOffset = #$mass$
	@massOffset *= -1

	%costOffset = #$cost$
	@costOffset *= -1

	!RESOURCE[LiquidFuel] {}
}
@PART[*]:HAS[@RESOURCE[LqdHydrogen],@RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[MonoPropellant],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleEngines],!MODULE[ModuleEnginesFX],~SRFTankType[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankType = Default

	%totalCap = #$RESOURCE[LqdHydrogen]/maxAmount$
	@totalCap += #$RESOURCE[Oxidizer]/maxAmount$
	@totalCap /= 5.327

	%massOffset = #$mass$
	@massOffset *= -1

	%costOffset = #$cost$
	@costOffset *= -1

	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[Oxidizer] {}
}
@PART[*]:HAS[@RESOURCE[LqdMethane],@RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[MonoPropellant],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleEngines],!MODULE[ModuleEnginesFX],~SRFTankType[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankType = Default

	%totalCap = #$RESOURCE[LqdMethane]/maxAmount$
	@totalCap += #$RESOURCE[Oxidizer]/maxAmount$
	@totalCap /= 2.5

	%massOffset = #$mass$
	@massOffset *= -1

	%costOffset = #$cost$
	@costOffset *= -1

	!RESOURCE[LqdMethane] {}
	!RESOURCE[Oxidizer] {}
}

// CryoTanks patch was applied - tank volume is already in totalCap variable
@PART[*]:HAS[@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch],@SUBTYPE[LH2]:HAS[#tankType[LH2]]],#totalCap[>0],~SRFTankType[],~SRFTankAlreadyConfigured[]]:NEEDS[CryoTanks]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankType = Default

	%massOffset = #$mass$
	@massOffset *= -1

	%costOffset = #$cost$
	@costOffset *= -1
}

// Default values

// Default mass offset = -mass
@PART[*]:HAS[#SRFTankType[Default],#totalCap[>0],~massOffset[],#mass[*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%massOffset = #$mass$
	@massOffset *= -1
}
// Default cost offset = -cost
@PART[*]:HAS[#SRFTankType[Default],#totalCap[>0],~costOffset[],#cost[*],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%costOffset = #$cost$
	@costOffset *= -1
}

@PART[*]:HAS[#SRFTankType[Default],~SRFGenericTankMaxTemp[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFGenericTankMaxTemp = 2000
}
@PART[*]:HAS[#SRFTankType[Default],~SRFBalloonMaxTemp[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFBalloonMaxTemp = 1600
}
@PART[*]:HAS[#SRFTankType[Default],~SRFBalloonCrashTolerance[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFBalloonCrashTolerance = 2
}
@PART[*]:HAS[#SRFTankType[Default],~SRFCryoTankMaxTemp[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFCryoTankMaxTemp = 2000
}
@PART[*]:HAS[#SRFTankType[Default],~SRFCryoTankCrashTolerance[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFCryoTankCrashTolerance = 3
}
@PART[*]:HAS[#SRFTankType[Default],~SRFFuselageMaxTemp[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFFuselageMaxTemp = 2500
}

// If part MaxTemp is higher than 2500, set it's MaxTemp as SRFFuselageMaxTemp
@PART[*]:HAS[#SRFTankType[Default],#maxTemp[>2500],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFFuselageMaxTemp = #$maxTemp$
}

// Determine (if it's not already defined elsewhere), is tank Fuselage or not, based on it's MaxTemp 
// Fuselage tanks cannot have Balloon types, and not-Fuselage tanks, obviously, cannot have Fuselage types
// This affects only high-tech tanks (tiers III and IV)
@PART[*]:HAS[#SRFTankType[Default],~SRFFuselage[],#maxTemp[>2499],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFFuselage = True
}
@PART[*]:HAS[#SRFTankType[Default],~SRFFuselage[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFFuselage = False
}

// If tank tech was not defined, let's set it according to tank volume: larger volume means higher tech level
@PART[*]:HAS[#SRFTankType[Default],#totalCap[>1800],~SRFTankTech[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Volume > 1800 (everything bigger than FL-TX1800 from Making History DLC) - high tech tank
	%SRFTankTech = LevelIV
}
@PART[*]:HAS[#SRFTankType[Default],#totalCap[>800],~SRFTankTech[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Volume > 800 (everything bigger than FL-T800) - mid to high tech tank
	%SRFTankTech = LevelIII
}
@PART[*]:HAS[#SRFTankType[Default],#totalCap[>160],~SRFTankTech[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Volume > 160 - low to mid tech tank
	%SRFTankTech = LevelII
}
@PART[*]:HAS[#SRFTankType[Default],~SRFTankTech[],~SRFTankAlreadyConfigured[]]:FOR[zzzzSimplifiedRealFuels]
{
	// Everythig else - low tech tank
	%SRFTankTech = LevelI
}

// If part has some modules - correct tank mass and cost
@PART[*]:HAS[#SRFTankType[Default],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleCargoBay]]:FOR[zzzzSimplifiedRealFuels]
{
	// Cargo bays, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[Default],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleCommand]]:FOR[zzzzSimplifiedRealFuels]
{
	// Command modules, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[Default],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleDockingNode]]:FOR[zzzzSimplifiedRealFuels]
{
	// Docking ports, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[Default],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleParachute]]:FOR[zzzzSimplifiedRealFuels]
{
	// Parachutes, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[Default],~SRFTankAlreadyConfigured[],#totalCap[>0],@MODULE[ModuleActiveRadiator]]:FOR[zzzzSimplifiedRealFuels]
{
	// Radiators, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}
@PART[*]:HAS[#SRFTankType[Default],~SRFTankAlreadyConfigured[],#totalCap[>0],#CrewCapacity[>0]]:FOR[zzzzSimplifiedRealFuels]
{
	// Crewed modules, containing some fuel, retain their original mass (minus the mass of fuel tank)
	%massOffset = #$totalCap$
	@massOffset *= 0.000625 // standard dry mass per units of LF/OX
	@massOffset *= -1
	// Cost exluding LF/OX cost
	%costOffset = #$totalCap$
	@costOffset *= 0.459 // cost per one unit of LF/OX mixture
	@costOffset *= -1
}

// Fuel tank types switcher

// High-tech tanks (tech level IV) - fuselages (no balloons)
@PART[*]:HAS[#SRFTankType[Default],#SRFTankTech[LevelIV],#SRFFuselage[*rue],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF Fuselage *:

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// Fuselages
		SUBTYPE
		{
			name = HydroLOXFuselage
			title = #LOC_SRF_HydroLOX_Fuselage_DisplayName
			tankType = SRF_HydroLOXFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = MethaLOXFuselage
			title = #LOC_SRF_MethaLOX_Fuselage_DisplayName
			tankType = SRF_MethaLOXFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = KeroLOXFuselage
			title = #LOC_SRF_KeroLOX_Fuselage_DisplayName
			tankType = SRF_KeroLOXFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = UDMHNTOFuselage
			title = #LOC_SRF_UDMHNTO_Fuselage_DisplayName
			tankType = SRF_UDMHNTOFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = Aerozine50NTOFuselage-HP
			title = #LOC_SRF_Aerozine50NTO_Fuselage-HP_DisplayName
			tankType = SRF_Aerozine50NTOFuselage-HP
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = MMHNTOFuselage-HP
			title = #LOC_SRF_MMHNTO_Fuselage-HP_DisplayName
			tankType = SRF_MMHNTOFuselage-HP
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = HydrazineNTOFuselage-HP
			title = #LOC_SRF_HydrazineNTO_Fuselage-HP_DisplayName
			tankType = SRF_HydrazineNTOFuselage-HP
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = LH2Fuselage
			title = #LOC_SRF_LH2_Fuselage_DisplayName
			tankType = SRF_LH2Fuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = LqdMethaneFuselage
			title = #LOC_SRF_LqdMethane_Fuselage_DisplayName
			tankType = SRF_LqdMethaneFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = KeroseneFuselage
			title = #LOC_SRF_Kerosene_Fuselage_DisplayName
			tankType = SRF_KeroseneFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = MethanolFuselage
			title = #LOC_SRF_Methanol_Fuselage_DisplayName
			tankType = SRF_MethanolFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = LqdAmmoniaFuselage
			title = #LOC_SRF_LqdAmmonia_Fuselage_DisplayName
			tankType = SRF_LqdAmmoniaFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = LOXFuselage
			title = #LOC_SRF_LOX_Fuselage_DisplayName
			tankType = SRF_LOXFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}

		// Generic tanks
		SUBTYPE
		{
			name = HydroLOXIV
			title = #LOC_SRF_HydroLOX_IV_DisplayName
			tankType = SRF_HydroLOXIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = MethaLOXIV
			title = #LOC_SRF_MethaLOX_IV_DisplayName
			tankType = SRF_MethaLOXIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = KeroLOXIV
			title = #LOC_SRF_KeroLOX_IV_DisplayName
			tankType = SRF_KeroLOXIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = UDMHNTOIV
			title = #LOC_SRF_UDMHNTO_IV_DisplayName
			tankType = SRF_UDMHNTOIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = Aerozine50NTOIV
			title = #LOC_SRF_Aerozine50NTO_IV_DisplayName
			tankType = SRF_Aerozine50NTOIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LH2IV
			title = #LOC_SRF_LH2_IV_DisplayName
			tankType = SRF_LH2IV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LqdMethaneIV
			title = #LOC_SRF_LqdMethane_IV_DisplayName
			tankType = SRF_LqdMethaneIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = KeroseneIV
			title = #LOC_SRF_Kerosene_IV_DisplayName
			tankType = SRF_KeroseneIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = MethanolIV
			title = #LOC_SRF_Methanol_IV_DisplayName
			tankType = SRF_MethanolIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = LOXIV
			title = #LOC_SRF_LOX_IV_DisplayName
			tankType = SRF_LOXIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// High pressure tanks
		SUBTYPE
		{
			name = LOXIV-HP
			title = #LOC_SRF_LOX_IV-HP_DisplayName
			tankType = SRF_LOXIV-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_HPTanksIV_Upgrade
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdHydrogen
			// in % per hr
			BoiloffRate = 0.05
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

// High-tech tanks (tech level IV) - generic (not fuselages)
Fuselages (no balloons)
@PART[*]:HAS[#SRFTankType[Default],#SRFTankTech[LevelIV],#SRFFuselage[*alse],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// Fuel + oxidizer

		// Generic tanks
		SUBTYPE
		{
			name = KeroLOXIV
			title = #LOC_SRF_KeroLOX_IV_DisplayName
			tankType = SRF_KeroLOXIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = HydroLOXIV
			title = #LOC_SRF_HydroLOX_IV_DisplayName
			tankType = SRF_HydroLOXIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = MethaLOXIV
			title = #LOC_SRF_MethaLOX_IV_DisplayName
			tankType = SRF_MethaLOXIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = UDMHNTOIV
			title = #LOC_SRF_UDMHNTO_IV_DisplayName
			tankType = SRF_UDMHNTOIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = Aerozine50NTOIV
			title = #LOC_SRF_Aerozine50NTO_IV_DisplayName
			tankType = SRF_Aerozine50NTOIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// Cryogenic balloon tanks
		SUBTYPE
		{
			name = HydroLOXCryo
			title = #LOC_SRF_HydroLOX_Cryo_DisplayName
			tankType = SRF_HydroLOXCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = MethaLOXCryo
			title = #LOC_SRF_MethaLOX_Cryo_DisplayName
			tankType = SRF_MethaLOXCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}

		// Fuel OR oxidizer

		// Generic tanks
		SUBTYPE
		{
			name = KeroseneIV
			title = #LOC_SRF_Kerosene_IV_DisplayName
			tankType = SRF_KeroseneIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = MethanolIV
			title = #LOC_SRF_Methanol_IV_DisplayName
			tankType = SRF_MethanolIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = LH2IV
			title = #LOC_SRF_LH2_IV_DisplayName
			tankType = SRF_LH2IV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LqdMethaneIV
			title = #LOC_SRF_LqdMethane_IV_DisplayName
			tankType = SRF_LqdMethaneIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LOXIV
			title = #LOC_SRF_LOX_IV_DisplayName
			tankType = SRF_LOXIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// High pressure tanks
		SUBTYPE
		{
			name = LOXIV-HP
			title = #LOC_SRF_LOX_IV-HP_DisplayName
			tankType = SRF_LOXIV-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_HPTanksIV_Upgrade
		}

		// Cryogenic balloon tanks
		SUBTYPE
		{
			name = LH2Cryo
			title = #LOC_SRF_LH2_Cryo_DisplayName
			tankType = SRF_LH2Cryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LqdMethaneCryo
			title = #LOC_SRF_LqdMethane_Cryo_DisplayName
			tankType = SRF_LqdMethaneCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LqdAmmoniaCryo
			title = #LOC_SRF_LqdAmmonia_Cryo_DisplayName
			tankType = SRF_LqdAmmoniaCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LOXCryo
			title = #LOC_SRF_LOX_Cryo_DisplayName
			tankType = SRF_LOXCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdHydrogen
			// in % per hr
			BoiloffRate = 0.05
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

// Mid-to-high-tech tanks (tech level III) - fuselages (no balloons)
@PART[*]:HAS[#SRFTankType[Default],#SRFTankTech[LevelIII],#SRFFuselage[*rue],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	@title ^= :$: * SRF Fuselage *:

	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// Fuselages
		SUBTYPE
		{
			name = HydroLOXFuselage
			title = #LOC_SRF_HydroLOX_Fuselage_DisplayName
			tankType = SRF_HydroLOXFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = MethaLOXFuselage
			title = #LOC_SRF_MethaLOX_Fuselage_DisplayName
			tankType = SRF_MethaLOXFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = KeroLOXFuselage
			title = #LOC_SRF_KeroLOX_Fuselage_DisplayName
			tankType = SRF_KeroLOXFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = UDMHNTOFuselage
			title = #LOC_SRF_UDMHNTO_Fuselage_DisplayName
			tankType = SRF_UDMHNTOFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = Aerozine50NTOFuselage-HP
			title = #LOC_SRF_Aerozine50NTO_Fuselage-HP_DisplayName
			tankType = SRF_Aerozine50NTOFuselage-HP
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = MMHNTOFuselage-HP
			title = #LOC_SRF_MMHNTO_Fuselage-HP_DisplayName
			tankType = SRF_MMHNTOFuselage-HP
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = HydrazineNTOFuselage-HP
			title = #LOC_SRF_HydrazineNTO_Fuselage-HP_DisplayName
			tankType = SRF_HydrazineNTOFuselage-HP
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = LH2Fuselage
			title = #LOC_SRF_LH2_Fuselage_DisplayName
			tankType = SRF_LH2Fuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = LqdMethaneFuselage
			title = #LOC_SRF_LqdMethane_Fuselage_DisplayName
			tankType = SRF_LqdMethaneFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = KeroseneFuselage
			title = #LOC_SRF_Kerosene_Fuselage_DisplayName
			tankType = SRF_KeroseneFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = MethanolFuselage
			title = #LOC_SRF_Methanol_Fuselage_DisplayName
			tankType = SRF_MethanolFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = LqdAmmoniaFuselage
			title = #LOC_SRF_LqdAmmonia_Fuselage_DisplayName
			tankType = SRF_LqdAmmoniaFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}
		SUBTYPE
		{
			name = LOXFuselage
			title = #LOC_SRF_LOX_Fuselage_DisplayName
			tankType = SRF_LOXFuselage
			maxTemp = #$../../SRFFuselageMaxTemp$
			upgradeRequired = SRF_Fuselages_Upgrade
		}

		// Generic tanks
		SUBTYPE
		{
			name = KeroLOXIII
			title = #LOC_SRF_KeroLOX_III_DisplayName
			tankType = SRF_KeroLOXIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = HydroLOXIII
			title = #LOC_SRF_HydroLOX_III_DisplayName
			tankType = SRF_HydroLOXIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = MethaLOXIII
			title = #LOC_SRF_MethaLOX_III_DisplayName
			tankType = SRF_MethaLOXIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = UDMHNTOIII
			title = #LOC_SRF_UDMHNTO_III_DisplayName
			tankType = SRF_UDMHNTOIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = Aerozine50NTOIII
			title = #LOC_SRF_Aerozine50NTO_III_DisplayName
			tankType = SRF_Aerozine50NTOIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = KeroseneIV
			title = #LOC_SRF_Kerosene_IV_DisplayName
			tankType = SRF_KeroseneIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = AvGasIV
			title = #LOC_SRF_AvGas_IV_DisplayName
			tankType = SRF_AvGasIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = MethanolIV
			title = #LOC_SRF_Methanol_IV_DisplayName
			tankType = SRF_MethanolIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = LH2III
			title = #LOC_SRF_LH2_III_DisplayName
			tankType = SRF_LH2III
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LqdMethaneIII
			title = #LOC_SRF_LqdMethane_III_DisplayName
			tankType = SRF_LqdMethaneIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LOXIII
			title = #LOC_SRF_LOX_III_DisplayName
			tankType = SRF_LOXIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// High pressure tanks
		SUBTYPE
		{
			name = LOXIII-HP
			title = #LOC_SRF_LOX_III-HP_DisplayName
			tankType = SRF_LOXIII-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdHydrogen
			// in % per hr
			BoiloffRate = 0.05
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

// Mid-to-high-tech tanks (tech level III) - generic (not fuselages)
@PART[*]:HAS[#SRFTankType[Default],#SRFTankTech[LevelIII],#SRFFuselage[*alse],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// Fuel + oxidizer

		// Generic tanks
		SUBTYPE
		{
			name = KeroLOXIII
			title = #LOC_SRF_KeroLOX_III_DisplayName
			tankType = SRF_KeroLOXIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = HydroLOXIII
			title = #LOC_SRF_HydroLOX_III_DisplayName
			tankType = SRF_HydroLOXIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = MethaLOXIII
			title = #LOC_SRF_MethaLOX_III_DisplayName
			tankType = SRF_MethaLOXIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = UDMHNTOIII
			title = #LOC_SRF_UDMHNTO_III_DisplayName
			tankType = SRF_UDMHNTOIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = Aerozine50NTOIII
			title = #LOC_SRF_Aerozine50NTO_III_DisplayName
			tankType = SRF_Aerozine50NTOIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// Balloon tanks
		SUBTYPE
		{
			name = KeroLOXBalloon
			title = #LOC_SRF_KeroLOX_Balloon_DisplayName
			tankType = SRF_KeroLOXBalloon
			maxTemp = #$../../SRFBalloonMaxTemp$
			crashTolerance = #$../../SRFBalloonCrashTolerance$
			upgradeRequired = SRF_BalloonTanks_Upgrade
		}
		SUBTYPE
		{
			name = HydroLOXBalloon
			title = #LOC_SRF_HydroLOX_Balloon_DisplayName
			tankType = SRF_HydroLOXBalloon
			maxTemp = #$../../SRFBalloonMaxTemp$
			crashTolerance = #$../../SRFBalloonCrashTolerance$
			upgradeRequired = SRF_BalloonTanks_Upgrade
		}
		SUBTYPE
		{
			name = MethaLOXBalloon
			title = #LOC_SRF_MethaLOX_Balloon_DisplayName
			tankType = SRF_MethaLOXBalloon
			maxTemp = #$../../SRFBalloonMaxTemp$
			crashTolerance = #$../../SRFBalloonCrashTolerance$
			upgradeRequired = SRF_BalloonTanks_Upgrade
		}
		SUBTYPE
		{
			name = UDMHNTOBalloon
			title = #LOC_SRF_UDMHNTO_Balloon_DisplayName
			tankType = SRF_UDMHNTOBalloon
			maxTemp = #$../../SRFBalloonMaxTemp$
			crashTolerance = #$../../SRFBalloonCrashTolerance$
			upgradeRequired = SRF_BalloonTanks_Upgrade
		}
		SUBTYPE
		{
			name = Aerozine50NTOBalloon
			title = #LOC_SRF_Aerozine50NTO_Balloon_DisplayName
			tankType = SRF_Aerozine50NTOBalloon
			maxTemp = #$../../SRFBalloonMaxTemp$
			crashTolerance = #$../../SRFBalloonCrashTolerance$
			upgradeRequired = SRF_BalloonTanks_Upgrade
		}

		// Cryogenic balloon tanks
		SUBTYPE
		{
			name = HydroLOXCryo
			title = #LOC_SRF_HydroLOX_Cryo_DisplayName
			tankType = SRF_HydroLOXCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = MethaLOXCryo
			title = #LOC_SRF_MethaLOX_Cryo_DisplayName
			tankType = SRF_MethaLOXCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}

		// Fuel OR oxidizer

		// Generic tanks
		SUBTYPE
		{
			name = KeroseneIV
			title = #LOC_SRF_Kerosene_IV_DisplayName
			tankType = SRF_KeroseneIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = AvGasIV
			title = #LOC_SRF_AvGas_IV_DisplayName
			tankType = SRF_AvGasIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = MethanolIV
			title = #LOC_SRF_Methanol_IV_DisplayName
			tankType = SRF_MethanolIV
			maxTemp = #$../../SRFGenericTankMaxTemp$
			upgradeRequired = SRF_AdvAirplanesTanks_Upgrade
		}
		SUBTYPE
		{
			name = LH2III
			title = #LOC_SRF_LH2_III_DisplayName
			tankType = SRF_LH2III
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LqdMethaneIII
			title = #LOC_SRF_LqdMethane_III_DisplayName
			tankType = SRF_LqdMethaneIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LOXIII
			title = #LOC_SRF_LOX_III_DisplayName
			tankType = SRF_LOXIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// High pressure tanks
		SUBTYPE
		{
			name = LOXIII-HP
			title = #LOC_SRF_LOX_III-HP_DisplayName
			tankType = SRF_LOXIII-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// Cryogenic balloon tanks
		SUBTYPE
		{
			name = LH2Cryo
			title = #LOC_SRF_LH2_Cryo_DisplayName
			tankType = SRF_LH2Cryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LqdMethaneCryo
			title = #LOC_SRF_LqdMethane_Cryo_DisplayName
			tankType = SRF_LqdMethaneCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LqdAmmoniaCryo
			title = #LOC_SRF_LqdAmmonia_Cryo_DisplayName
			tankType = SRF_LqdAmmoniaCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
		SUBTYPE
		{
			name = LOXCryo
			title = #LOC_SRF_LOX_Cryo_DisplayName
			tankType = SRF_LOXCryo
			maxTemp = #$../../SRFCryoTankMaxTemp$
			crashTolerance = #$../../SRFCryoTankCrashTolerance$
			upgradeRequired = SRF_CryoTanks_Upgrade
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdHydrogen
			// in % per hr
			BoiloffRate = 0.05
		}
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
		BOILOFFCONFIG
		{
			FuelName = LqdMethane
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

// Low-to-mid-tech tanks (tech level II)
@PART[*]:HAS[#SRFTankType[Default],#SRFTankTech[LevelII],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// Fuel + oxidizer

		// Generic tanks
		SUBTYPE
		{
			name = AlcoLOXII
			title = #LOC_SRF_AlcoLOX_II_DisplayName
			tankType = SRF_AlcoLOXII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = KeroLOXII
			title = #LOC_SRF_KeroLOX_II_DisplayName
			tankType = SRF_KeroLOXII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = UDMHNTOII
			title = #LOC_SRF_UDMHNTO_II_DisplayName
			tankType = SRF_UDMHNTOII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = Aerozine50NTOII
			title = #LOC_SRF_Aerozine50NTO_II_DisplayName
			tankType = SRF_Aerozine50NTOII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// High pressure tanks
		SUBTYPE
		{
			name = Aerozine50NTOII-HP
			title = #LOC_SRF_Aerozine50NTO_II-HP_DisplayName
			tankType = SRF_Aerozine50NTOII-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = MMHNTOII-HP
			title = #LOC_SRF_MMHNTO_II-HP_DisplayName
			tankType = SRF_MMHNTOII-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = UDMHNTOII-HP
			title = #LOC_SRF_UDMHNTO_II-HP_DisplayName
			tankType = SRF_UDMHNTOII-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = HydrazineNTOII-HP
			title = #LOC_SRF_HydrazineNTO_II-HP_DisplayName
			tankType = SRF_HydrazineNTOII-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// Balloon tanks
		SUBTYPE
		{
			name = KeroLOXBalloon
			title = #LOC_SRF_KeroLOX_Balloon_DisplayName
			tankType = SRF_KeroLOXBalloon
			maxTemp = #$../../SRFBalloonMaxTemp$
			crashTolerance = #$../../SRFBalloonCrashTolerance$
			upgradeRequired = SRF_BalloonTanks_Upgrade
		}
		SUBTYPE
		{
			name = UDMHNTOBalloon
			title = #LOC_SRF_UDMHNTO_Balloon_DisplayName
			tankType = SRF_UDMHNTOBalloon
			maxTemp = #$../../SRFBalloonMaxTemp$
			crashTolerance = #$../../SRFBalloonCrashTolerance$
			upgradeRequired = SRF_BalloonTanks_Upgrade
		}
		SUBTYPE
		{
			name = Aerozine50NTOBalloon
			title = #LOC_SRF_Aerozine50NTO_Balloon_DisplayName
			tankType = SRF_Aerozine50NTOBalloon
			maxTemp = #$../../SRFBalloonMaxTemp$
			crashTolerance = #$../../SRFBalloonCrashTolerance$
			upgradeRequired = SRF_BalloonTanks_Upgrade
		}

		// Fuel OR oxidizer

		// Generic tanks
		SUBTYPE
		{
			name = AvGasIII
			title = #LOC_SRF_AvGas_III_DisplayName
			tankType = SRF_AvGasIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = KeroseneIII
			title = #LOC_SRF_Kerosene_III_DisplayName
			tankType = SRF_KeroseneIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = MethanolIII
			title = #LOC_SRF_Methanol_III_DisplayName
			tankType = SRF_MethanolIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LOXII
			title = #LOC_SRF_LOX_II_DisplayName
			tankType = SRF_LOXII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// High pressure tanks
		SUBTYPE
		{
			name = HydrazineII-HP
			title = #LOC_SRF_Hydrazine_II-HP_DisplayName
			tankType = SRF_HydrazineII-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}

// Low-tech tanks (tech level I)
@PART[*]:HAS[#SRFTankType[Default],#SRFTankTech[LevelI],#totalCap[>0],#massOffset[*],#costOffset[*],~SRFTankAlreadyConfigured[]]:NEEDS[B9PartSwitch]:FOR[zzzzSimplifiedRealFuels]
{
	%SRFTankAlreadyConfigured = True
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[MonoPropellant] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}

	// Mass and cost of part are determined by tank type and volume
	@mass += #$massOffset$
	@cost += #$costOffset$
	// but they should not be negative
	@mass ^= :^-.*$:0: // If negative, set to zero
	@cost ^= :^-.*$:0: // If negative, set to zero

	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]] {}

	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = fuelSwitch
		switcherDescription = #LOC_SRF_TankType_DisplayName
		baseVolume = #$../totalCap$
		affectDragCubes = false

		// Fuel + oxidizer

		// Generic tanks
		SUBTYPE
		{
			name = AlcoLOXI
			title = #LOC_SRF_AlcoLOX_I_DisplayName
			tankType = SRF_AlcoLOXI
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = KeroLOXII
			title = #LOC_SRF_KeroLOX_I_DisplayName
			tankType = SRF_KeroLOXI
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = UDMHNTOI
			title = #LOC_SRF_UDMHNTO_I_DisplayName
			tankType = SRF_UDMHNTOI
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = Aerozine50NTOI
			title = #LOC_SRF_Aerozine50NTO_I_DisplayName
			tankType = SRF_Aerozine50NTOI
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// High pressure tanks
		SUBTYPE
		{
			name = Aerozine50NTOI-HP
			title = #LOC_SRF_Aerozine50NTO_I-HP_DisplayName
			tankType = SRF_Aerozine50NTOI-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = MMHNTOI-HP
			title = #LOC_SRF_MMHNTO_I-HP_DisplayName
			tankType = SRF_MMHNTOI-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = UDMHNTOI-HP
			title = #LOC_SRF_UDMHNTO_I-HP_DisplayName
			tankType = SRF_UDMHNTOI-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = HydrazineNTOI-HP
			title = #LOC_SRF_HydrazineNTO_I-HP_DisplayName
			tankType = SRF_HydrazineNTOI-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// Fuel OR oxidizer

		// Generic tanks
		SUBTYPE
		{
			name = AvGasIII
			title = #LOC_SRF_AvGas_III_DisplayName
			tankType = SRF_AvGasIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = KeroseneIII
			title = #LOC_SRF_Kerosene_III_DisplayName
			tankType = SRF_KeroseneIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = MethanolIII
			title = #LOC_SRF_Methanol_III_DisplayName
			tankType = SRF_MethanolIII
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
		SUBTYPE
		{
			name = LOXI
			title = #LOC_SRF_LOX_I_DisplayName
			tankType = SRF_LOXI
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}

		// High pressure tanks
		SUBTYPE
		{
			name = HydrazineI-HP
			title = #LOC_SRF_Hydrazine_I-HP_DisplayName
			tankType = SRF_HydrazineI-HP
			maxTemp = #$../../SRFGenericTankMaxTemp$
		}
	}

	!MODULE[ModuleCryoTank] {}
	MODULE:NEEDS[CryoTanks]
	{
		name =  ModuleCryoTank
		CoolingCost = 0.09
		CoolingEnabled = False
		BOILOFFCONFIG
		{
			FuelName = LqdOxygen
			// in % per hr
			BoiloffRate = 0.005
		}
	}
}
